package prewire

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestPrewireCommand(t *testing.T) {
	// Create a temporary directory for the test
	tempDir, err := os.MkdirTemp("", "prewire-test")
	require.NoError(t, err)
	defer os.RemoveAll(tempDir)

	writeGoMod(t, tempDir)

	// Create a file with a PreWireSet variable
	createPreWireFile(t, tempDir, "testpkg", singleFileContent)
	packageDir := filepath.Join(tempDir, "testpkg")

	// Change to the test package directory
	originalDir, err := os.Getwd()
	require.NoError(t, err)
	defer os.Chdir(originalDir)
	err = os.Chdir(packageDir)
	require.NoError(t, err)

	// Run the prewire command
	err = PrewireCommand()
	require.NoError(t, err)

	// Check that the prewire_gen.go file was created
	wireFile := filepath.Join(packageDir, "prewire_gen.go")
	assert.FileExists(t, wireFile)

	// Read the content of the prewire_gen.go file
	wireContent, err := os.ReadFile(wireFile)
	require.NoError(t, err)

	// Check that the content contains the expected elements
	wireContentStr := string(wireContent)
	expectedContentStr := `// Code generated by prewire; DO NOT EDIT.
//go:generate go run github.com/cmaher/prewire/cmd/prewire

package testpkg

import (
	"github.com/google/wire"
)

// WireSet is the provider set for this package
var WireSet = wire.NewSet(
	NewService,
	NewConfig,
)
`
	assert.Equal(t, expectedContentStr, wireContentStr)
}

func TestPrewireCommandWithUnion(t *testing.T) {
	// Create a temporary directory for the test
	tempDir, err := os.MkdirTemp("", "prewire-test-union")
	require.NoError(t, err)
	defer os.RemoveAll(tempDir)

	writeGoMod(t, tempDir)

	// Create the foo package with a PreWireSet variable
	createPreWireFile(t, tempDir, "foo", fooFileContent)
	createPreWireFile(t, tempDir, "bar", barFileContent)
	createPreWireFile(t, tempDir, "baz", bazFileContent)
	createPreWireFile(t, tempDir, "noop", noopFileContent)
	createPreWireFile(t, tempDir, "app", appFileContent)

	// Change to the app package directory
	appDir := filepath.Join(tempDir, "app")
	err = os.Chdir(appDir)
	require.NoError(t, err)

	// Run the prewire command
	err = PrewireCommand()
	require.NoError(t, err)

	// Check that the prewire_gen.go file was created
	wireFile := filepath.Join(appDir, "prewire_gen.go")
	assert.FileExists(t, wireFile)

	// Read the content of the prewire_gen.go file
	wireContent, err := os.ReadFile(wireFile)
	require.NoError(t, err)

	// Check that the content contains the expected elements
	wireContentStr := string(wireContent)
	expectedContentStr := `// Code generated by prewire; DO NOT EDIT.
//go:generate go run github.com/cmaher/prewire/cmd/prewire

package app

import (
	"github.com/google/wire"
	"github.com/example/user/bar"
	"github.com/example/user/baz"
	"github.com/example/user/foo"
)

// WireSet is the provider set for this package
var WireSet = wire.NewSet(
	New,
	ProvideLogger,
	ProvideRouter,
	foo.New,
	bar.New,
	baz.New,
)
`
	assert.Equal(t, expectedContentStr, wireContentStr)
}

func TestPrewireCommandWithAlias(t *testing.T) {
	// Create a temporary directory for the test
	tempDir, err := os.MkdirTemp("", "prewire-test-union")
	require.NoError(t, err)
	defer os.RemoveAll(tempDir)

	writeGoMod(t, tempDir)

	// Create the foo package with a PreWireSet variable
	createPreWireFile(t, tempDir, "foo", fooFileContent)
	createPreWireFile(t, tempDir, "usealias", aliasFileContent)

	// Change to the app package directory
	appDir := filepath.Join(tempDir, "usealias")
	err = os.Chdir(appDir)
	require.NoError(t, err)

	// Run the prewire command
	err = PrewireCommand()
	require.NoError(t, err)

	// Check that the prewire_gen.go file was created
	wireFile := filepath.Join(appDir, "prewire_gen.go")
	assert.FileExists(t, wireFile)

	// Read the content of the prewire_gen.go file
	wireContent, err := os.ReadFile(wireFile)
	require.NoError(t, err)

	// Check that the content contains the expected elements
	wireContentStr := string(wireContent)
	expectedContentStr := `// Code generated by prewire; DO NOT EDIT.
//go:generate go run github.com/cmaher/prewire/cmd/prewire

package usealias

import (
	"github.com/google/wire"
	bigfoo "github.com/example/user/foo"
)

// WireSet is the provider set for this package
var WireSet = wire.NewSet(
	New,
	bigfoo.New,
)
`
	assert.Equal(t, expectedContentStr, wireContentStr)

}

func TestPrewireCommandWithAliasAndUnion(t *testing.T) {
	// Create a temporary directory for the test
	tempDir, err := os.MkdirTemp("", "prewire-test-union")
	require.NoError(t, err)
	defer os.RemoveAll(tempDir)

	writeGoMod(t, tempDir)

	// Create the foo package with a PreWireSet variable
	createPreWireFile(t, tempDir, "foo", fooFileContent)
	createPreWireFile(t, tempDir, "usealias", aliasFileContent)
	createPreWireFile(t, tempDir, "nestalias", nestAliasFileContent)

	// Change to the app package directory
	appDir := filepath.Join(tempDir, "nestalias")
	err = os.Chdir(appDir)
	require.NoError(t, err)

	// Run the prewire command
	err = PrewireCommand()
	require.NoError(t, err)

	// Check that the prewire_gen.go file was created
	wireFile := filepath.Join(appDir, "prewire_gen.go")
	assert.FileExists(t, wireFile)

	// Read the content of the prewire_gen.go file
	wireContent, err := os.ReadFile(wireFile)
	require.NoError(t, err)

	// Check that the content contains the expected elements
	wireContentStr := string(wireContent)
	expectedContentStr := `// Code generated by prewire; DO NOT EDIT.
//go:generate go run github.com/cmaher/prewire/cmd/prewire

package nestalias

import (
	"github.com/google/wire"
	bigfoo "github.com/example/user/foo"
	"github.com/example/user/usealias"
)

// WireSet is the provider set for this package
var WireSet = wire.NewSet(
	New,
	usealias.New,
	bigfoo.New,
)
`
	assert.Equal(t, expectedContentStr, wireContentStr)

}

func createPreWireFile(t *testing.T, rootDir, pkg, content string) {
	dir := filepath.Join(rootDir, pkg)
	err := os.Mkdir(dir, 0755)
	require.NoError(t, err)

	// Create the foo package with a PreWireSet variable
	f := filepath.Join(dir, "prewire.go")
	err = os.WriteFile(f, []byte(content), 0644)
	require.NoError(t, err)
}

func writeGoMod(t *testing.T, rootDir string) {
	goModPath := filepath.Join(rootDir, "go.mod")
	goModContent := "module github.com/example/user\n\ngo 1.24.2\n"
	err := os.WriteFile(goModPath, []byte(goModContent), 0644)
	require.NoError(t, err)
}

const singleFileContent = `package testpkg

import (
	"github.com/cmaher/prewire"
	"github.com/google/wire"
)

// Service is a test service
type Service struct {
	Config *Config
}

// Config is a test configuration
type Config struct {
	Name string
}

// NewService creates a new Service
func NewService(config *Config) *Service {
	return &Service{Config: config}
}

// NewConfig creates a new Config
func NewConfig() *Config {
	return &Config{Name: "test"}
}

// PreWireSet is the provider set for this package
var PreWireSet = prewire.NewSet(
	NewService,
	NewConfig,
)
`

const fooFileContent = `package foo

import (
	"github.com/cmaher/prewire"
)

// PreWireSet is the provider set for foo
var PreWireSet = prewire.NewSet(
	New,
)

func New() *Service {
	return &Service{}
}

type Service struct{}
`

const barFileContent = `package bar

import (
	"github.com/cmaher/prewire"
)

// PreWireSet is the provider set for bar
var PreWireSet = prewire.NewSet(
	New,
)

func New() *Service {
	return &Service{}
}

type Service struct{}
`

const bazFileContent = `package baz

import (
	"github.com/cmaher/prewire"
	"github.com/example/user/noop"
)

// PreWireSet is the provider set for baz
var PreWireSet = prewire.NewSet(
	New,
)

func New() *Service {
	return &Service{}
}

type Service struct{}

// noop should not be included in the final imports
func init() {
	noop.Noop()
}
`

const noopFileContent = `package noop

	func Noop() {}
`

const appFileContent = `package app

import (
	"github.com/cmaher/prewire"
	"github.com/example/user/foo"
	"github.com/example/user/bar"
	"github.com/example/user/baz"
)

// PreWireSet is the provider set for app
var PreWireSet = prewire.NewSet(
	New,
	ProvideLogger,
	ProvideRouter,
).Union(
	foo.PreWireSet,
	bar.PreWireSet,
	baz.PreWireSet,
)

// New creates a new app
func New() *App {
	return &App{}
}

// App is the main application
type App struct{}

// ProvideLogger provides a logger
func ProvideLogger() *Logger {
	return &Logger{}
}

// Logger is a logger
type Logger struct{}

// ProvideRouter provides a router
func ProvideRouter() *Router {
	return &Router{}
}

// Router is a router
type Router struct{}
`

const aliasFileContent = `package usealias

import (
	bigfoo "github.com/example/user/foo"
	"github.com/cmaher/prewire"
)

// PreWireSet is the provider set for bar
var PreWireSet = prewire.NewSet(
	New,
	bigfoo.New,
)

func New() *Service {
	return &Service{}
}

type Service struct{}
`

const nestAliasFileContent = `package nestalias

import (
	"github.com/example/user/usealias"
	"github.com/cmaher/prewire"
)

// PreWireSet is the provider set for bar
var PreWireSet = prewire.NewSet(
	New,
).Union(
	usealias.PreWireSet,
)

func New() *Service {
	return &Service{}
}

type Service struct{}
`
